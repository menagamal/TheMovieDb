//
//  DetailInteractor.swift
//  TheMovieDb
//
//  Created Mena Gamal on 8/22/20.
//  Copyright © 2020 Mena Gamal. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DetailInteractor: BaseInteractor<AppTarget>,DetailInteractorInputProtocol {
    
    weak var presenter: DetailInteractorOutputProtocol?
    private var movie:Movie
    private var movieDetails:MovieDetailsResponse?
    
    init(movie:Movie) {
        
        self.movie = movie
    }
    func loadSimilarMovies(to id: Int) {
        request(targetType:.fetchNowPlaying) { [weak self] (response: NowPlayingResponse) in
            guard let strongSelf = self else { return }
            guard let movies = response.results else { return }
            strongSelf.presenter?.didSimilarMovies(movies: movies)
        }
    }
    func loadMovieDetails() {
        request(targetType:.fetchMovieDetails(id: movie.id!)) { [weak self] (response: MovieDetailsResponse) in
            guard let strongSelf = self else { return }
            strongSelf.movieDetails = response
            strongSelf.presenter?.didFetchMovieDetails(movie: response)
        }
    }
    func rateMovie(rate: Double) {
        request(targetType:.rating(id: movie.id!, rating: rate)) { [weak self] (response: MovieDetailsResponse) in
            guard let strongSelf = self else { return }
            strongSelf.presenter?.didRateMovie()
        }
    }
    func isFavourite() -> Bool {
        guard let id = movie.id else {
            return false
        }
        
        if CacheHandler.ids.contains(id) {
            return true
            
        } else {
            return false
            
        }
    }
    func toggleFavourte(movie:Movie) {
        guard let id = movie.id else {
            return
        }
        guard let obj = movieDetails else {
            return
        }
        if CacheHandler.ids.contains(id) {
            let _ = CacheHandler.shared.deleteObject(object:obj)
            
        } else {
            let _ = CacheHandler.shared.SaveData(object: obj)
            
        }
    }
    
    
}
